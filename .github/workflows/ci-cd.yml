name: TaskifAI CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  # ============================================
  # BACKEND TESTS
  # ============================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: taskifai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt || true
          pip install pytest pytest-asyncio pytest-cov httpx

      - name: Run linting (ruff)
        working-directory: ./backend
        run: |
          pip install ruff
          ruff check app/ tests/

      - name: Run type checking (mypy)
        working-directory: ./backend
        run: |
          pip install mypy
          mypy app/

      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taskifai_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci_only
          ENVIRONMENT: test
          # Supabase test credentials (using secrets)
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY || 'test_anon_key' }}
          SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY || 'test_service_key' }}
          # Tenant Registry test credentials
          TENANT_REGISTRY_URL: ${{ secrets.TENANT_REGISTRY_URL || 'https://test-registry.supabase.co' }}
          TENANT_REGISTRY_ANON_KEY: ${{ secrets.TENANT_REGISTRY_ANON_KEY || 'test_registry_anon' }}
          TENANT_REGISTRY_SERVICE_KEY: ${{ secrets.TENANT_REGISTRY_SERVICE_KEY || 'test_registry_service' }}
          # Optional keys
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-test-key' }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY || 'test_sendgrid_key' }}
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taskifai_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci_only
          ENVIRONMENT: test
          # Supabase test credentials
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY || 'test_anon_key' }}
          SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY || 'test_service_key' }}
          # Tenant Registry test credentials
          TENANT_REGISTRY_URL: ${{ secrets.TENANT_REGISTRY_URL || 'https://test-registry.supabase.co' }}
          TENANT_REGISTRY_ANON_KEY: ${{ secrets.TENANT_REGISTRY_ANON_KEY || 'test_registry_anon' }}
          TENANT_REGISTRY_SERVICE_KEY: ${{ secrets.TENANT_REGISTRY_SERVICE_KEY || 'test_registry_service' }}
          # Optional keys
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-test-key' }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY || 'test_sendgrid_key' }}
        run: |
          pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=term

      - name: Run security tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taskifai_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci_only
          ENVIRONMENT: test
          # Supabase test credentials
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY || 'test_anon_key' }}
          SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY || 'test_service_key' }}
          # Tenant Registry test credentials
          TENANT_REGISTRY_URL: ${{ secrets.TENANT_REGISTRY_URL || 'https://test-registry.supabase.co' }}
          TENANT_REGISTRY_ANON_KEY: ${{ secrets.TENANT_REGISTRY_ANON_KEY || 'test_registry_anon' }}
          TENANT_REGISTRY_SERVICE_KEY: ${{ secrets.TENANT_REGISTRY_SERVICE_KEY || 'test_registry_service' }}
          # Optional keys
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-test-key' }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY || 'test_sendgrid_key' }}
        run: |
          pytest tests/security/ -v --cov=app --cov-append --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ============================================
  # FRONTEND TESTS
  # ============================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run TypeScript check
        working-directory: ./frontend
        run: npm run type-check || npx tsc --noEmit

      - name: Run unit tests
        working-directory: ./frontend
        run: npm test

      - name: Build production bundle
        working-directory: ./frontend
        run: npm run build

      - name: Analyze bundle size
        working-directory: ./frontend
        run: |
          npx vite-bundle-visualizer || true
          du -sh dist/
          echo "Bundle size:" >> $GITHUB_STEP_SUMMARY
          du -h dist/ >> $GITHUB_STEP_SUMMARY

  # ============================================
  # SECURITY SCANNING
  # ============================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python dependency check (Safety)
        working-directory: ./backend
        run: |
          pip install safety
          safety check --json

      - name: JavaScript dependency check (npm audit)
        working-directory: ./frontend
        run: |
          npm audit --audit-level=high

      - name: Secret scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ============================================
  # PERFORMANCE TESTS
  # ============================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run performance tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taskifai_test
          SECRET_KEY: test_secret_key_for_ci_only
        run: |
          pytest tests/performance/ -v -m performance --tb=short

  # ============================================
  # DOCKER BUILD
  # ============================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/taskifai-backend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/taskifai-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/taskifai-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/taskifai-backend:buildcache,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/taskifai-frontend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/taskifai-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/taskifai-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/taskifai-frontend:buildcache,mode=max

  # ============================================
  # DEPLOY TO STAGING
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.taskifai.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment script here
          # Example: kubectl apply -f k8s/staging/
          # Or: docker-compose -f docker-compose.staging.yml up -d

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          curl -f https://staging.taskifai.com/api/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ============================================
  # DEPLOY TO PRODUCTION
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://demo.taskifai.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment script here
          # Example: kubectl apply -f k8s/production/
          # Or: ./scripts/deploy-production.sh

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          curl -f https://demo.taskifai.com/api/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed :rocket:'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ============================================
  # POST-DEPLOYMENT MONITORING
  # ============================================
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Monitor application health
        run: |
          echo "Monitoring application health for 5 minutes..."
          for i in {1..10}; do
            curl -f https://demo.taskifai.com/api/health || exit 1
            sleep 30
          done

      - name: Check error rates
        run: |
          echo "Checking error rates..."
          # Add monitoring check here
          # Example: Query monitoring system for error rates

      - name: Notify monitoring results
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Post-deployment monitoring passed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
